// scss-lint:disable ColorVariable

// ----------------------------------------------------------------------------
// Grids
// ----------------------------------------------------------------------------

// Uses susy grid 3 for grid math and mappy-breakpoints for simple syntax
// Some bootstrap-style helper classes included for rapid prototyping


// Susy Configuration

// Set # of columns
$_columns: 12;

// Susy Configuration
$susy: (
  'columns': susy-repeat($_columns),
  'gutters': .4,
  'svg-grid-colors': hsla(180, 50%, 50%, 0.25), //scss-lint-ignore-line
);

// Container mixin
@mixin container($config: $susy, $debug: false) {
  $config: susy-settings($config);
  $container-spread: map-get($config, 'container-spread');

  @include clearfix;
  margin: 0 auto;
  max-width: 100%;

  @if $debug {
    background: susy-svg-grid($grid: $config) no-repeat scroll;
  }
}

// Span Mixin
@mixin span($span, $config: $susy, $center: false) {
  width: span($span, $config);

  // if last, then float right
  @if index($span, 'last') {
    float: right;
  } @else if $center == true {
    margin-left: auto;
    margin-right: auto;
  } @else {
    float: left;
    margin-right: gutter();

    &:last-child {
      margin-right: 0;
    }
  }
}

// gallery mixin
@mixin gallery($span, $config: ()) {
  $grid: susy-compile($span, $config);
  $span: map-get($grid, 'span');
  $column-count: length(map-get($grid, 'columns'));
  $count: floor($column-count / $span);
  $spread: map-get($grid, 'spread') + 2;
  $container-spread: map-get($grid, 'container-spread') + 2;
  $extra: ($container-spread - $spread) * 0.5;
  $extra-push: su-call('su-gutter', $grid) * $extra;

  float: left;
  margin-right: -100%;

  @for $n from 1 through ($count) {
    $nth: unquote('#{$count}n + #{$n}');
    $location: $span * ($n - 1) + 1;

    &:nth-child(#{$nth}) {
      $width: susy-compile($span at $location, $grid);
      width: su-call('su-span', $width);

      @if ($location > 1) {
        $wide: susy-compile('first' $location - 1 'wide', $grid);
        clear: none;
        margin-left: su-call('su-span', $wide) + $extra-push;
      } @else {
        clear: both;
        margin-left: if($extra-push > 0, $extra-push, 0);
      }
    }
  }
}


.row {
  @include clearfix;
}

.break {
  clear: both;
}

.container {
  @include clearfix;
  @include container($debug: false);
  height: 100%;
  margin: 0 auto;
  padding: 0 space(1);

  @include bp(small) {
    width: (map-get($breakpoints, small));
  }

  @include bp(medium) {
    width: (map-get($breakpoints, medium));
  }

  @include bp(large) {
    width: (map-get($breakpoints, large));
  }
}


// Breakpoint specific column classes
// ----------------------------------

// columns for x-small+
// ex: col-xs-8 or col-xs-3
@for $i from 1 through $_columns {
  .col-xs-#{$i} {
    @include span($i);

    &--last {
      @include span($i last);
    }

    &--center {
      @include span($i, $center: true);
    }
  }
}

// columns for small+
// ex: col-sm-8 or col-sm-3
@for $i from 1 through $_columns {
  .col-sm-#{$i} {
    @include bp(small) {
      @include span($i);

      &--last {
        @include span($i last);
      }

      &--center {
        @include span($i, $center: true);
      }
    }
  }
}

// columns for medium+
// ex: col-md-8 or col-md-3
@for $i from 1 through $_columns {
  .col-md-#{$i} {
    @include bp(medium) {
      @include span($i);

      &--last {
        @include span($i last);
      }

      &--center {
        @include span($i, $center: true);
      }
    }
  }
}

// columns for large+
// ex: col-lg-8 or col-lg-3
@for $i from 1 through $_columns {
  .col-lg-#{$i} {
    @include bp(large) {
      @include span($i);

      &--last {
        @include span($i last);
      }

      &--center {
        @include span($i, $center: true);
      }
    }
  }
}


// offset (push) columns for x-small+
// ex: col-xs-offset-8 or col-xs-offset-3
@for $i from 1 through $_columns {
  .col-xs-offset-#{$i} {
    margin-left: span($i);
  }
}

// offset (push) columns for small+
// ex: col-sm-offset-8 or col-sm-offset-3
@for $i from 1 through $_columns {
  .col-sm-offset-#{$i} {
    @include bp(small) {
      margin-left: span($i wide);
    }
  }
}

// offset (push) columns for medium+
// ex: col-md-offset-8 or col-md-offset-3
@for $i from 1 through $_columns {
  .col-md-offset-#{$i} {
    @include bp(medium) {
      margin-left: span($i wide);
    }
  }
}

// offset (push) columns for large+
// ex: col-lg-offset-8 or col-lg-offset-3
@for $i from 1 through $_columns {
  .col-lg-offset-#{$i} {
    @include bp(large) {
      margin-left: span($i wide);
    }
  }
}
